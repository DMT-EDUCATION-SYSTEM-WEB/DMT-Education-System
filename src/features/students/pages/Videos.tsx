import React, { useEffect, useState } from 'react';
import { getStudentVideos } from '../api';
import Card from '../../../components/common/Card';
import Spinner from '../../../components/common/Spinner';

interface Video {
  id: string;
  title: string;
  description: string;
  duration: string;
  url: string;
  thumbnail?: string;
  watchedProgress: number;
  isCompleted: boolean;
}

const VideoCard: React.FC<{ video: Video }> = ({ video }) => (
  <Card className="overflow-hidden">
    <div className="aspect-video bg-gray-100 relative">
      {video.thumbnail ? (
        <img src={video.thumbnail} alt={video.title} className="w-full h-full object-cover" />
      ) : (
        <div className="w-full h-full flex items-center justify-center text-gray-400">
          <span className="text-4xl">üé•</span>
        </div>
      )}
      <div className="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded">
        {video.duration}
      </div>
      {video.isCompleted && (
        <div className="absolute top-2 right-2 bg-green-500 text-white rounded-full p-1">
          <span className="text-xs">‚úì</span>
        </div>
      )}
    </div>
    <div className="p-4">
      <h3 className="font-semibold text-gray-900">{video.title}</h3>
      <p className="text-sm text-gray-600 mt-1">{video.description}</p>
      
      <div className="mt-3">
        <div className="flex justify-between text-xs text-gray-500 mb-1">
          <span>Ti·∫øn ƒë·ªô</span>
          <span>{video.watchedProgress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-primary-500 h-2 rounded-full transition-all" 
            style={{ width: `${video.watchedProgress}%` }}
          />
        </div>
      </div>

      <button 
        className="mt-4 w-full bg-primary-600 text-white py-2 px-4 rounded-md hover:bg-primary-700 transition"
        onClick={() => window.open(video.url, '_blank')}
      >
        {video.watchedProgress > 0 ? 'Ti·∫øp t·ª•c xem' : 'B·∫Øt ƒë·∫ßu xem'}
      </button>
    </div>
  </Card>
);

const Videos: React.FC = () => {
  const [videos, setVideos] = useState<Video[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState<'all' | 'completed' | 'in-progress'>('all');

  useEffect(() => {
    const loadVideos = async () => {
      try {
        setLoading(true);
        // Fallback with mock data since API might not be ready
        const mockVideos: Video[] = [
          {
            id: '1',
            title: 'To√°n 9 - Ph∆∞∆°ng tr√¨nh b·∫≠c 2',
            description: 'H·ªçc c√°ch gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c 2 v·ªõi c√°c v√≠ d·ª• c·ª• th·ªÉ',
            duration: '45:30',
            url: '#',
            watchedProgress: 75,
            isCompleted: false
          },
          {
            id: '2',
            title: 'L√Ω 9 - ƒê·ªông h·ªçc ch·∫•t ƒëi·ªÉm',
            description: 'T√¨m hi·ªÉu v·ªÅ chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu v√† bi·∫øn ƒë·ªïi ƒë·ªÅu',
            duration: '38:15',
            url: '#',
            watchedProgress: 100,
            isCompleted: true
          },
          {
            id: '3',
            title: 'H√≥a 9 - Axit v√† baz∆°',
            description: 'Kh√°i ni·ªám v√† t√≠nh ch·∫•t c·ªßa axit, baz∆° trong h√≥a h·ªçc',
            duration: '42:20',
            url: '#',
            watchedProgress: 0,
            isCompleted: false
          }
        ];
        setVideos(mockVideos);
      } catch (err: any) {
        setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i video');
      } finally {
        setLoading(false);
      }
    };

    loadVideos();
  }, []);

  const filteredVideos = videos.filter(video => {
    if (filter === 'completed') return video.isCompleted;
    if (filter === 'in-progress') return video.watchedProgress > 0 && !video.isCompleted;
    return true;
  });

  if (loading) return (
    <div className="flex items-center gap-2 text-gray-600">
      <Spinner /> ƒêang t·∫£i video...
    </div>
  );

  if (error) return (
    <div className="text-red-600 bg-red-50 p-4 rounded-md">
      L·ªói: {error}
    </div>
  );

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-xl font-semibold text-gray-900">Video b√†i h·ªçc</h1>
        <p className="text-sm text-gray-600">Xem l·∫°i c√°c bu·ªïi h·ªçc ƒë√£ ghi h√¨nh. Video ƒë∆∞·ª£c b·∫£o v·ªá b·∫£n quy·ªÅn.</p>
      </div>

      <div className="flex gap-2">
        {[
          { key: 'all', label: 'T·∫•t c·∫£' },
          { key: 'in-progress', label: 'ƒêang xem' },
          { key: 'completed', label: 'ƒê√£ ho√†n th√†nh' }
        ].map(({ key, label }) => (
          <button
            key={key}
            onClick={() => setFilter(key as any)}
            className={`px-3 py-1 text-sm rounded-md transition ${
              filter === key
                ? 'bg-primary-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {label}
          </button>
        ))}
      </div>

      {filteredVideos.length === 0 ? (
        <Card>
          <div className="text-center py-8 text-gray-500">
            Kh√¥ng c√≥ video n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.
          </div>
        </Card>
      ) : (
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {filteredVideos.map(video => (
            <VideoCard key={video.id} video={video} />
          ))}
        </div>
      )}

      <Card>
        <div className="text-center py-4">
          <p className="text-sm text-gray-600">üí° Video ƒë∆∞·ª£c b·∫£o v·ªá b·∫£n quy·ªÅn - kh√¥ng th·ªÉ t·∫£i xu·ªëng</p>
          <p className="text-xs text-gray-500">T·ªëi ƒëa 3 thi·∫øt b·ªã c√≥ th·ªÉ xem c√πng l√∫c</p>
        </div>
      </Card>
    </div>
  );
};

export default Videos;